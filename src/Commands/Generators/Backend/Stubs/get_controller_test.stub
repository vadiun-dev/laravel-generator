<?php

namespace Tests\Actions\upperName\GetupperName;

use Illuminate\Support\Facades\Gate;
use Mockery\MockInterface;
use Src\upperName\Actions\GetupperNameAction;
use Src\upperName\Models\upperName;
use Src\upperName\Requests\GetupperNameRequest;
use Src\User\User\Enums\Roles;
use Tests\NeedsFormRequests;
use Tests\ResourceHelpers\upperName\upperNameResourceTestHelper;
use Tests\TestCase;
use Tests\UserMustBeAuthenticated;
use Tests\UserMustBeVerified;

class GetupperNameControllerTest extends TestCase implements UserMustBeAuthenticated, NeedsFormRequests, UserMustBeVerified
{
    public function acceptedRoles(): array
    {
        return [
            [Roles::SUPER_ADMIN],
        ];
    }

    /**
     * @test
     * @dataProvider acceptedRoles
     * @param $rol
     */
    public function get_lowerName($rol): void
    {
        $lowerName = upperName::factory(2)->create();
        $expectedJson = upperNameResourceTestHelper::complete($lowerName);
        $this->basicGetAssert(GetupperNameAction::class, "routeName", $rol, $expectedJson);
    }

    /** @test */
    public function user_must_be_authenticated_exception(): void
    {
        $this->assert_route_needs_logged_user('get', 'routeName');
    }

    /** @test */
    public function user_must_be_verified_exception(): void
    {
        $this->assert_route_needs_verified_user('get', 'routeName');
    }

    /** @test */
    public function unaccepted_roles(): void
    {
        $this->assert_unaccepted_roles('get', 'routeName');
    }

    /** @test */
    public function controller_uses_correct_form_request(): void
    {
        $this->assertActionUsesFormRequest(GetupperNameAction::class, GetupperNameRequest::class);
    }

    /** @test */
    public function form_request_rules_are_correct(): void
    {
        $request = new GetupperNameRequest();
        $this->assertEquals([], $request->rules());
    }

    /** @test */
    public function form_request_authorization_is_true(): void
    {
        /** @var GetupperNameRequest $request */
        $request = $this->partialMock(
            GetupperNameRequest::class,
            fn (MockInterface $m) => $m->shouldReceive('user')->andReturn(1)
        );
        Gate::shouldReceive('check')->with('get-lowerName', 1)->andReturn(true);
        $this->assertTrue($request->authorize());
    }


}
